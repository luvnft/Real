'use client'
import React, { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import { createClient } from '@supabase/supabase-js';
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from '@/components/ui/separator';
import { Heading } from '@/components/ui/heading';
import { Plus } from "lucide-react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { ScrollArea } from '@/components/ui/scroll-area';
// Initialize Supabase client
const supabase = createClient('https://tbnfcmekmqbhxfvrzmbp.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRibmZjbWVrbXFiaHhmdnJ6bWJwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyMDg1MjkyNSwiZXhwIjoyMDM2NDI4OTI1fQ.QPyLbV_M2ZGvw_bpbpPZui4HBtODsDHhFR92p4Yos1I');


export default function Component() {
  const [userData, setUserData] = useState({
    sellers: [],
    buyers: [],
    agents: [],
    attorneys: [],
  });
  const [filters, setFilters] = useState({
    status: [],
    source: [],
    dateRange: { start: null, end: null },
    priceRange: { min: null, max: null },
    bedroomsRange: { min: null, max: null },
    bathroomsRange: { min: null, max: null },
    squareFootageRange: { min: null, max: null },
    yearBuiltRange: { min: null, max: null },
    agentRating: null,
    specializations: [],
    practiceAreas: [],
    yearsOfExperience: null,
    agentState: "",
    agentCity: "",
    agentCountry: "",
    agentFullName: "",
  });

  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("sellers");
  const [isFilterSheetOpen, setIsFilterSheetOpen] = useState(false);

  const renderMoreFiltersContent = () => {
    switch (activeTab) {
      case 'sellers':
        return (
          <>
            <Label>Price Range</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, priceRange: { ...filters.priceRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, priceRange: { ...filters.priceRange, max: e.target.value } })}
              />
            </div>
            <Label>Bedrooms</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, bedroomsRange: { ...filters.bedroomsRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, bedroomsRange: { ...filters.bedroomsRange, max: e.target.value } })}
              />
            </div>
            <Label>Bathrooms</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, bathroomsRange: { ...filters.bathroomsRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, bathroomsRange: { ...filters.bathroomsRange, max: e.target.value } })}
              />
            </div>
            <Label>Square Footage</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, squareFootageRange: { ...filters.squareFootageRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, squareFootageRange: { ...filters.squareFootageRange, max: e.target.value } })}
              />
            </div>
            <Label>Year Built</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, yearBuiltRange: { ...filters.yearBuiltRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, yearBuiltRange: { ...filters.yearBuiltRange, max: e.target.value } })}
              />
            </div>
          </>
        );
      case 'buyers':
        return (
          <>
            <Label>Budget Range</Label>
            <div className="flex space-x-2">
              <Input
                type="number"
                placeholder="Min"
                onChange={(e) => setFilters({ ...filters, priceRange: { ...filters.priceRange, min: e.target.value } })}
              />
              <Input
                type="number"
                placeholder="Max"
                onChange={(e) => setFilters({ ...filters, priceRange: { ...filters.priceRange, max: e.target.value } })}
              />
            </div>
            <Label>Minimum Bedrooms</Label>
            <Input
              type="number"
              onChange={(e) => setFilters({ ...filters, bedroomsRange: { ...filters.bedroomsRange, min: e.target.value } })}
            />
            <Label>Minimum Bathrooms</Label>
            <Input
              type="number"
              onChange={(e) => setFilters({ ...filters, bathroomsRange: { ...filters.bathroomsRange, min: e.target.value } })}
            />
            <Label>Minimum Square Footage</Label>
            <Input
              type="number"
              onChange={(e) => setFilters({ ...filters, squareFootageRange: { ...filters.squareFootageRange, min: e.target.value } })}
            />
            <Label>Pre-approval Status</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, preApprovalStatus: e.target.value })}
            />
          </>
        );
      case 'agents':
        return (
          <>
            <Label>Agent Rating</Label>
            <Input
              type="number"
              min="1"
              max="5"
              onChange={(e) => setFilters({ ...filters, agentRating: e.target.value })}
            />
            
            <Label>Years of Experience</Label>
            <Input
              type="number"
              onChange={(e) => setFilters({ ...filters, yearsOfExperience: e.target.value })}
            />
            <Label>State</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, agentState: e.target.value })}
            />
            <Label>City</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, agentCity: e.target.value })}
            />
            <Label>Country</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, agentCountry: e.target.value })}
            />
            <Label>Full Name</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, agentFullName: e.target.value })}
            />
          </>
        );
      case 'attorneys':
        return (
          <>
            <Label>Practice Areas</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, practiceAreas: e.target.value.split(',') })}
            />
            <Label>Years of Experience</Label>
            <Input
              type="number"
              onChange={(e) => setFilters({ ...filters, yearsOfExperience: e.target.value })}
            />
            <Label>Bar Number</Label>
            <Input
              type="text"
              onChange={(e) => setFilters({ ...filters, barNumber: e.target.value })}
            />
          </>
        );
      default:
        return null;
    }
  };

  useEffect(() => {
    if (activeTab === 'agents') {
      fetchAgents();
    } else {
      fetchData(activeTab);
    }
  }, [activeTab]);

  const fetchData = async (tab) => {
    setIsLoading(true);
    let { data, error } = await supabase
      .from(tab)
      .select('*');
    
    if (error) {
      console.error('Error fetching data:', error);
    } else {
      const formattedData = data.map(item => formatData(item, tab));
      setUserData(prevData => ({
        ...prevData,
        [tab]: formattedData
      }));
    }
    setIsLoading(false);
  };

  const fetchAgents = async () => {
    setIsLoading(true);
    const options = {
      method: 'GET',
      headers: {
        'x-rapidapi-host': 'realtor-base.p.rapidapi.com',
        'x-rapidapi-key': 'ea98ab9399msh65f52313967f3e6p17654bjsnf919c767d658'
      }
    };

    try {
      const response = await fetch('https://realtor-base.p.rapidapi.com/realtor/agents/list?postal_code=11234&rating=1&recommendation=1', options);
      const result = await response.json();
      console.log(result)
      
      if (result.status && result.data) {
        const formattedAgents = result.data.map(agent => ({
          id: agent.id,
          name: agent.person_name,
          contact: { email: agent.email || "N/A", phone: agent.phones?.[0]?.number || "N/A" },
          status: agent.agent_rating ? `Rating: ${agent.agent_rating}` : "N/A",
          source: agent.broker?.name || "N/A",
          date: agent.last_updated || "N/A",
          licenseNumber: agent.license_number || "N/A",
          specialization: agent.specializations?.join(", ") || "N/A",
          yearsOfExperience: "N/A"
        }));
        
        setUserData(prevData => ({
          ...prevData,
          agents: formattedAgents
        }));
      }
    } catch (error) {
      console.error('Error fetching agents:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const formatData = (item, tab) => {
    switch(tab) {
      case 'sellers':
        return {
          id: item.id,
          name: item.fullName,
          contact: { email: item.email, phone: item.phone },
          status: item.status || 'New',
          source: item.source || 'Website',
          date: item.created_at,
          propertyAddress: item.propertyAddress,
          askingPrice: item.askingPrice,
          bedrooms: item.bedrooms,
          bathrooms: item.bathrooms,
        };
      case 'buyers':
        return {
          id: item.id,
          name: item.fullName,
          contact: { email: item.email, phone: item.phone },
          status: item.status || 'New',
          source: item.source || 'Website',
          date: item.created_at,
          desiredLocation: item.desiredLocation,
          budget: item.budget,
          minBedrooms: item.minBedrooms,
          minBathrooms: item.minBathrooms,
        };
      case 'attorneys':
        return {
          id: item.id,
          name: item.fullName,
          contact: { email: item.email, phone: item.phone },
          status: item.status || 'Available',
          source: item.lawFirmName,
          date: item.created_at,
          barNumber: item.barNumber,
          practiceAreas: item.practiceAreas,
          yearsOfExperience: item.yearsOfExperience,
        };
      default:
        return item;
    }
  };

  const filteredData = useMemo(() => {
    return userData[activeTab].filter((user) => {
      if (filters.status.length > 0 && !filters.status.includes(user.status)) return false;
      if (filters.source.length > 0 && !filters.source.includes(user.source)) return false;
      if (filters.dateRange.start && new Date(user.date) < new Date(filters.dateRange.start)) return false;
      if (filters.dateRange.end && new Date(user.date) > new Date(filters.dateRange.end)) return false;
      
      // Additional filters based on user type
      switch (activeTab) {
        case 'sellers':
          if (filters.priceRange.min && user.askingPrice < filters.priceRange.min) return false;
          if (filters.priceRange.max && user.askingPrice > filters.priceRange.max) return false;
          if (filters.bedroomsRange.min && user.bedrooms < filters.bedroomsRange.min) return false;
          if (filters.bedroomsRange.max && user.bedrooms > filters.bedroomsRange.max) return false;
          if (filters.bathroomsRange.min && user.bathrooms < filters.bathroomsRange.min) return false;
          if (filters.bathroomsRange.max && user.bathrooms > filters.bathroomsRange.max) return false;
          if (filters.squareFootageRange.min && user.squareFootage < filters.squareFootageRange.min) return false;
          if (filters.squareFootageRange.max && user.squareFootage > filters.squareFootageRange.max) return false;
          if (filters.yearBuiltRange.min && user.yearBuilt < filters.yearBuiltRange.min) return false;
          if (filters.yearBuiltRange.max && user.yearBuilt > filters.yearBuiltRange.max) return false;
          break;
        case 'buyers':
          if (filters.priceRange.min && user.budget < filters.priceRange.min) return false;
          if (filters.priceRange.max && user.budget > filters.priceRange.max) return false;
          if (filters.bedroomsRange.min && user.minBedrooms < filters.bedroomsRange.min) return false;
          if (filters.bathroomsRange.min && user.minBathrooms < filters.bathroomsRange.min) return false;
          if (filters.squareFootageRange.min && user.minSquareFootage < filters.squareFootageRange.min) return false;
          if (filters.preApprovalStatus && user.preApprovalStatus !== filters.preApprovalStatus) return false;
          break;
        case 'agents':
          if (filters.agentRating && user.agent_rating < filters.agentRating) return false;
          if (filters.specializations.length > 0 && !filters.specializations.some(spec => user.specializations.includes(spec))) return false;
          if (filters.yearsOfExperience && user.yearsOfExperience < filters.yearsOfExperience) return false;
          if (filters.agentState && user.address.state.toLowerCase() !== filters.agentState.toLowerCase()) return false;
          if (filters.agentCity && user.address.city.toLowerCase() !== filters.agentCity.toLowerCase()) return false;
          if (filters.agentCountry && user.address.country.toLowerCase() !== filters.agentCountry.toLowerCase()) return false;
          if (filters.agentFullName && !user.full_name.toLowerCase().includes(filters.agentFullName.toLowerCase())) return false;
          break;
        case 'attorneys':
          if (filters.practiceAreas.length > 0 && !filters.practiceAreas.some(area => user.practiceAreas.includes(area))) return false;
          if (filters.yearsOfExperience && user.yearsOfExperience < filters.yearsOfExperience) return false;
          if (filters.barNumber && user.barNumber !== filters.barNumber) return false;
          break;
      }
      
      return true;
    });
  }, [activeTab, filters, userData]);

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between space-y-2 mb-4">
        <Heading title="List Your Property" description="Use our AI-Integrated restate tools and make ease of using the Platform" />
        <div className="hidden items-center space-x-2 md:flex">
          <Link href='/dashboard/leadform'>
            <Button>
              <Plus className="mr-2 h-4 w-4" /> Add New
            </Button>
          </Link>
        </div>
      </div>

      <Card className="p-4" style={{borderRadius:'0'}}>
        <Card className="w-full max-w-4xl mx-auto mb-4 mt-4" >
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-4" style={{display:"flex",justifyContent:'space-between'}}>
              {Object.keys(userData).map((userType) => (
                <TabsTrigger key={userType} value={userType} className="capitalize">
                  {userType}
                </TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
        </Card>

        <Card className="w-full max-w-4xl mx-auto" style={{borderRadius:'1px'}}>
          <div className="flex-1 overflow-auto">
            <div className="bg-muted py-4 px-6">
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild style={{border:'1px solid black'}}>
                    <Button variant="outline" className="w-full">
                      <span>Status</span>
                      <ChevronDownIcon className="w-4 h-4 ml-auto" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start">
                    {Array.from(new Set(userData[activeTab].map(user => user.status))).map((status) => (
                      <DropdownMenuCheckboxItem
                        key={status}
                        checked={filters.status.includes(status)}
                        onCheckedChange={(checked) =>
                          setFilters({
                            ...filters,
                            status: checked
                              ? [...filters.status, status]
                              : filters.status.filter((s) => s !== status),
                          })
                        }
                      >
                        {status}
                      </DropdownMenuCheckboxItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild style={{border:'1px solid black'}}>
                    <Button variant="outline" className="w-full">
                      <span>Source</span>
                      <ChevronDownIcon className="w-4 h-4 ml-auto" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start">
                    {Array.from(new Set(userData[activeTab].map(user => user.source))).map((source) => (
                      <DropdownMenuCheckboxItem
                        key={source}
                        checked={filters.source.includes(source)}
                        onCheckedChange={(checked) =>
                          setFilters({
                            ...filters,
                            source: checked
                              ? [...filters.source, source]
                              : filters.source.filter((s) => s !== source),
                          })
                        }
                      >
                        {source}
                      </DropdownMenuCheckboxItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
                <div className="w-full" />
                <DropdownMenu>
                  <DropdownMenuTrigger asChild style={{border:'1px solid black'}}>
                  <Sheet open={isFilterSheetOpen} onOpenChange={setIsFilterSheetOpen}>
                <SheetTrigger asChild>
                  <Button variant="outline" className="w-full" style={{border:'1px solid black'}}>
                    <span>More Filters</span>
                    <FilterIcon className="w-4 h-4 ml-auto" />
                  </Button>
                </SheetTrigger>
                
                <SheetContent>
                <ScrollArea className="h-full pr-4"> 
                  <SheetHeader>
                    <SheetTitle>Additional Filters</SheetTitle>
                  </SheetHeader>
                  
                  <div className="grid gap-4 py-4">
                    {renderMoreFiltersContent()}
                  </div>
                  <Button onClick={() => setIsFilterSheetOpen(false)}>Apply Filters</Button>
                  </ScrollArea>
                </SheetContent>
              </Sheet>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="start">
                    <DropdownMenuCheckboxItem>Filter by Lead Score</DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem>Filter by Assigned User</DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem>Filter by Tags</DropdownMenuCheckboxItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
            <div className="">
              {isLoading ? (
                <div className="text-center py-4">Loading...</div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      
                      <TableHead>Status</TableHead>
                      <TableHead>Source</TableHead>
                      <TableHead>Date</TableHead>
                      <TableHead>{activeTab === 'sellers' ? 'Property' : activeTab === 'buyers' ? 'Desired' : 'Professional'} Info</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredData.map((user) => (
                      <TableRow key={user.id}>
                        <TableCell>
                          <div className="font-medium">{user.name}</div>
                        </TableCell>
                       
                        <TableCell>
                          <Badge variant={user.status === "New" ? "secondary" : "primary"}>{user.status}</Badge>
                        </TableCell>
                        <TableCell>{user.source}</TableCell>
                        <TableCell>{user.date}</TableCell>
                        <TableCell>
                          {activeTab === 'sellers' && (
                            <div>
                              
                              <div>${user.askingPrice}</div>
                              
                            </div>
                          )}
                          {activeTab === 'buyers' && (
                            <div>
                              <div>{user.desiredLocation}</div>
                              <div>Budget: ${user.budget}</div>
                              <div>{user.minBedrooms}+ bd {user.minBathrooms}+ ba</div>
                            </div>
                          )}
                          {activeTab === 'agents' && (
                            <div>
                              <div>License: {user.licenseNumber}</div>
                              <div>{user.specialization}</div>
                              <div>{user.yearsOfExperience} years exp.</div>
                            </div>
                          )}
                          {activeTab === 'attorneys' && (
                            <div>
                              <div>Bar: {user.barNumber}</div>
                              <div>{user.practiceAreas}</div>
                              <div>{user.yearsOfExperience} years exp.</div>
                            </div>
                          )}
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              View
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </div>
          </div>
        </Card>
      </Card>
    </div>
  );
}

function ChevronDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  )
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}